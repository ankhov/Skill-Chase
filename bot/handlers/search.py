from sqlalchemy.orm import joinedload
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from bot.utils.constants import ITEM_TYPES
from bot.database.models import Item, User, ItemType
from bot.database.db import get_session
from bot.utils.helpers import create_main_menu


async def search_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(text, callback_data=f"search_{key}")]
        for key, text in ITEM_TYPES.items()
    ]
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø:", reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def search_by_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    item_type = query.data.replace("search_", "")
    user_id = query.from_user.id

    try:
        enum_type = ItemType[item_type.upper()]
    except KeyError:
        await query.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø.")
        return

    with get_session() as session:
        current_user = session.query(User).filter_by(telegram_id=user_id).first()

        if not current_user or not current_user.field:
            await query.message.edit_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±–ª–∞—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "AI, ML, Robotics")
        user_fields = [field.strip().lower() for field in current_user.field.split(",")]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
        all_items = session.query(Item).options(joinedload(Item.creator))\
            .filter(Item.type == enum_type).all()

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –æ–±–ª–∞—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        items = [
            item for item in all_items
            if item.field and item.field.strip().lower() in user_fields
        ]

    if not items:
        await query.message.edit_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏.", reply_markup=create_main_menu())
        return

    await query.message.delete()

    for item in items:
        username = f"@{item.creator.username}" if item.creator and item.creator.username else "–ë–µ–∑ –∏–º–µ–Ω–∏"
        text = (
            f"üìå <b>{item.title}</b>\n\n"
            f"- –û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\n\n"
            f"- –û–±–ª–∞—Å—Ç—å: {item.field or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"-  –°–æ–∑–¥–∞—Ç–µ–ª—å: {username}"
        )
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=text,
            parse_mode="HTML"
        )

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤, –∑–∞–¥–∞—á –∏ –ª—é–¥–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
    )

    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text=welcome_text,
        reply_markup=create_main_menu()
    )

async def search_people(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    current_user_id = query.from_user.id
    with get_session() as session:
        current_user = session.query(User).filter_by(telegram_id=current_user_id).first()
        if not current_user or not current_user.field:
            await query.message.edit_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
            return

        # –û–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_fields = {field.strip().lower() for field in current_user.field.split(",")}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = session.query(User).filter(
            User.telegram_id != current_user_id,
            (User.skills != None) | (User.about != None)
        ).all()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é –æ–±–ª–∞—Å—Ç–µ–π
        matched_users = []
        for user in all_users:
            if user.field:
                user_fields_set = {f.strip().lower() for f in user.field.split(",")}
                if user_fields & user_fields_set:
                    matched_users.append(user)

    if not matched_users:
        await query.message.edit_text("–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await query.message.delete()

    for user in matched_users:
        text = (
            f"@{user.username}\n"
            f"–û–±–ª–∞—Å—Ç—å: {user.field or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–ù–∞–≤—ã–∫–∏: {user.skills or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"–û —Å–µ–±–µ: {user.about or '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n"
            f"GitHub: {user.github or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=text
        )

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤, –∑–∞–¥–∞—á –∏ –ª—é–¥–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
    )

    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text=welcome_text,
        reply_markup=create_main_menu()
    )


def register_handlers(application):
    application.add_handler(CallbackQueryHandler(search_item, pattern="search_item"))
    application.add_handler(CallbackQueryHandler(search_by_type, pattern="search_(project|hackathon|task|case_championship|olymp)"))
    application.add_handler(CallbackQueryHandler(search_people, pattern="search_people"))